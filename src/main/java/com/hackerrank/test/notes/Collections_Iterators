After Java 5, we can use modern iterator for iterating in the list.
Such as :

for (Person person : people)
{
      .......
      // CAN NOT REMOVE ITEM FROM THE LIST
}

Before Java 5 (but still in use), there was an other popular method show:
Idea is, it can point each item in the list by using is next method.

    Iterator<String> it = people.iterator();
    while (it.hasNext()){
        String person = it.next(): // move to pointer next item.
        System.out.println(person);
        it.remove(person); //remove the item. OR add the item.
    }

In addition to that, if you want to remove the item from the list while you are iterating it, you have to use Iterator<Template> interface.
Do not forget, LinkedList is the best if you want to add the item anywhere in the list comparatively ArrayList;

NOTE 1 : If you want to make your own object Iterable and wants to use it with Iterator<customObject>, than you have to implements Iterable<CustomObject>
in your custom object. Such as :

Class UrlLibrary implements Iterable<String> {
    private LinkedList<String> urls = new LinkedList<String>();
    public UrlLibrary(){
        urls.add("bbbadasdas");
        .....
    }

    @Override
    public Iterator<String> iterator{
        return urls.iterator();
    }
}

After this implementation you can use Before JAVA 5 and after JAVA 5 technques that are mentioned above for your custom object / class.

NOTE 2 : On top of this, you can also implement your own iterator. How ? for example :

Class UrlLibrary implements Iterable<String> {
    private LinkedList<String> urls = new LinkedList<String>();

    private class UrlIterator implements Iterator<String>{
        private int index = 0;

        @Override
        public boolean hasNext(){
            return index < urls.size;
        }

        @Override
        public String next(){
            String url = urls.get(index);
            index++;
        }

        @Override
        public void remove(){
            urls.remove(index);
        }

    }

    public UrlLibrary(){
        urls.add("bbbadasdas");
        .....
    }

    @Override
    public Iterator<String> iterator{
        return new UrlIterator();
    }
}